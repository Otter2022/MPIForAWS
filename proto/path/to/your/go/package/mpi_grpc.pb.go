// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: mpi.proto

package _package

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MPIService_Send_FullMethodName      = "/mpi.MPIService/Send"
	MPIService_Recv_FullMethodName      = "/mpi.MPIService/Recv"
	MPIService_Barrier_FullMethodName   = "/mpi.MPIService/Barrier"
	MPIService_Broadcast_FullMethodName = "/mpi.MPIService/Broadcast"
)

// MPIServiceClient is the client API for MPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service for the MPI-like framework
type MPIServiceClient interface {
	// Send a message from one node to another
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Receive a message from another node
	Recv(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (*RecvResponse, error)
	// Barrier synchronization between nodes
	Barrier(ctx context.Context, in *BarrierRequest, opts ...grpc.CallOption) (*BarrierResponse, error)
	// Broadcast a message to all nodes
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type mPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMPIServiceClient(cc grpc.ClientConnInterface) MPIServiceClient {
	return &mPIServiceClient{cc}
}

func (c *mPIServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, MPIService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPIServiceClient) Recv(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (*RecvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecvResponse)
	err := c.cc.Invoke(ctx, MPIService_Recv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPIServiceClient) Barrier(ctx context.Context, in *BarrierRequest, opts ...grpc.CallOption) (*BarrierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarrierResponse)
	err := c.cc.Invoke(ctx, MPIService_Barrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPIServiceClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, MPIService_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MPIServiceServer is the server API for MPIService service.
// All implementations must embed UnimplementedMPIServiceServer
// for forward compatibility.
//
// Define the gRPC service for the MPI-like framework
type MPIServiceServer interface {
	// Send a message from one node to another
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// Receive a message from another node
	Recv(context.Context, *RecvRequest) (*RecvResponse, error)
	// Barrier synchronization between nodes
	Barrier(context.Context, *BarrierRequest) (*BarrierResponse, error)
	// Broadcast a message to all nodes
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	mustEmbedUnimplementedMPIServiceServer()
}

// UnimplementedMPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMPIServiceServer struct{}

func (UnimplementedMPIServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMPIServiceServer) Recv(context.Context, *RecvRequest) (*RecvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedMPIServiceServer) Barrier(context.Context, *BarrierRequest) (*BarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Barrier not implemented")
}
func (UnimplementedMPIServiceServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedMPIServiceServer) mustEmbedUnimplementedMPIServiceServer() {}
func (UnimplementedMPIServiceServer) testEmbeddedByValue()                    {}

// UnsafeMPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPIServiceServer will
// result in compilation errors.
type UnsafeMPIServiceServer interface {
	mustEmbedUnimplementedMPIServiceServer()
}

func RegisterMPIServiceServer(s grpc.ServiceRegistrar, srv MPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedMPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MPIService_ServiceDesc, srv)
}

func _MPIService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPIServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPIService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPIServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPIService_Recv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPIServiceServer).Recv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPIService_Recv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPIServiceServer).Recv(ctx, req.(*RecvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPIService_Barrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPIServiceServer).Barrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPIService_Barrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPIServiceServer).Barrier(ctx, req.(*BarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPIService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPIServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPIService_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPIServiceServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MPIService_ServiceDesc is the grpc.ServiceDesc for MPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpi.MPIService",
	HandlerType: (*MPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MPIService_Send_Handler,
		},
		{
			MethodName: "Recv",
			Handler:    _MPIService_Recv_Handler,
		},
		{
			MethodName: "Barrier",
			Handler:    _MPIService_Barrier_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _MPIService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpi.proto",
}
